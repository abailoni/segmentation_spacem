# Which steps of the processing pipeline should be run?
# Usually we run all of them, but you can also run only a subset of them and avoid repeating preprocessing for example
# For each step, you find configuration options below.
methods_to_run:
  - preprocessing
  - generate_cellpose_input
  - cellpose_inference
  - convert_multiple_cellpose_output_to_zarr
  - export_results


preprocessing:
  # A zarr folder where the preprocessed data will be temporarely saved (usually on scratch)
  data_zarr_group: "/scratch/bailoni/projects/cellpose_inference_projects/jeany/2023-04-HTpaper/v2.zarr"
  # We can collect data from one or multiple directories on disk (each directory will usually contain a set of processed SpaceM 0.1 datasets).
  # Each of them is defined by a key (e.g. my_first_set_of_datasets) and the parameters/paths for this set of datasets are defined under the keys below.
  datasets_to_process:
    - my_first_set_of_datasets
  # Define the names of the channels that are present in the data.
  channels_to_process:
    - BF
    - DAPI
#    - EXTRA_channel_name
  # Parameters and paths for each set of datasets:
  my_first_set_of_datasets:
    # Directory path where the data is stored on disk (subfolders of this directory will contain the datasets).
    input_dir_path: "/scratch/delafiori/PDAC/SpaceM"
    # This is used to name the datasets in the zarr file. It is the depth of the project directory in the input_dir_path.
    # If the projet depth is -4 and a path of a matched image is "/scratch/delafiori/PDAC/SpaceM/S2_well4/analysis/transformation/cropped_pre_maldi_channels/pre_maldi_crop_ch0.tif",
    # the string "S2_well4" will be included in the dataset name.
    projectdir_depth: -4
    # Only look for images that contain this string in their path:
    filename_filter_include:
     - "analysis/transformation/cropped_pre_maldi_channels"
    # Exclude images that contain this string in their path:
    filename_filter_exclude:
      - "Batch1_"
#    crop_size: [500, 500] # For debugging, crop all images to crops of this size
#    precrop: "1000:2000, 1000:2000" # For debugging, crop all images to this region before cropping to crop_size
#    max_nb_images: 30 # For debugging, the maximum number of images to process. If not specified, all images will be processed.
    BF: "_ch_0" # The string that is used to identify the BF channel in the filenames
    DAPI: "_ch_1" # The string that is used to identify the DAPI channel in the filenames
    verbose: True # If True, print more information during processing

    # Possibly, apply some simple preprocessing steps to the images before running cellpose
    # (no longer recommended! Better to train a custom cellpose model and avoid preprocessing steps!)
    preprocessing:
      {}
#      BF:
#        - {
#          function_name: "segmUtils.LIVECellutils.preprocessing.preprocess",
#          function_kwargs: { }
##          function_name: "segmUtils.preprocessing.process_images.convert_to_cellpose_style",
##          function_kwargs: { method: "subtract" }
#        }
#        - {
#          function_name: "segmUtils.preprocessing.process_images.clip_image_values",
#          function_kwargs: { vmax: 162,
#                             vmin: 0,
#                             invert: True}
#        }
#      DAPI:
#        - {
#          function_name: "segmUtils.preprocessing.process_images.clip_image_values",
#          function_kwargs: { vmax: 133,
#                             vmin: 0,
#                             invert: False }
#        }

generate_cellpose_input:
  generate_for:
    - "cellpose_inference"
  convert_to_cellpose_kwargs:
    # Specify the channel names (among the ones you defined above) that should be used for cellpose.
    cellpose_ch0: "BF"
    cellpose_ch1: "DAPI"


cellpose_inference:
  input_dir: "$EXP_DIR/cellpose_inputs"
  multiple_cellpose_inference_kwargs:
    # Whether to estimate diameter or not:
    estimate_diameter: [False]
    # For certain models, we overwrite the estimate_diameter option above (e.g. with cyto2 it may be worth trying to estimate the diameter)
    # Otherwise, leave this option empty:
    overwrite_estimate_diameter:
#      {}
      cyto2: True
    # Which diameter to use for cellpose (if estimate_diameter is False)
    diameter: 45
    chan: 2 # Green
    chan2: 1 # Red
    mask_filter: "_masks"
#    flow_threshold: 0.7
    cellpose_infer_args:
      - no_npy

    # List of all models that should be run, with the corresponding model name or path to the model.
    tested_models:
      cyto2: "cyto2"
#      trained_model: "/scratch/delafiori/PDAC/Cellpose/CellposeTraining/my_trained_model/training_images/models/cellpose_residual_on_style_on_concatenation_off_training_images_2023_04_11_06_32_48.697642"


export_results:
  export_images_from_zarr_kwargs:
    filter_main_image_in_csv:
      my_first_set_of_datasets: "_ch_0" # specify the string identifying the main channel file (usually BrightField)

    # The naming scheme of the zarr inner_paths below is the following:
    #  - "cellpose_model_name" + "_diamEst" if the diameter was estimated,
    #  - otherwise "cellpose_model_name" + "_noDiamEst"

    # --------------------------------------------------------------
    # CASE 1: If we want to export the results of a single cellpose model that was run, we can use the following:
    # In this case, the exported segmentations will be saved in a folder structure that is equal to the original one (so you can easily merge them back into the original SpaceM processing directories).
    export_in_external_segm_folder: True
    datasets_to_export:
          - {inner_path: "trained_model_noDiamEst" }
    # --------------------------------------------------------------


#    # --------------------------------------------------------------
#    # CASE 2: If we want to export the results of all cellpose models that were run, we can use the following:
#    # Otherwise, all segmentations will be saved in the same folder.
#    export_in_external_segm_folder: False
#    datasets_to_export:
#      - {
#        inner_path: "cyto2_diamEst",
#        out_filter: "_segm_cyto2" # In this case we should specify the suffix that will be added to the original image name to identify the segmentation from this model
#      }
#      - {
#        inner_path: "trained_model_noDiamEst",
#        out_filter: "_segm_trained_model" # In this case we should specify the suffix that will be added to the original image name to identify the segmentation from this model
#      }
#    # --------------------------------------------------------------

